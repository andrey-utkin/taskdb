#!/usr/bin/env python3

# Format example:
# 
# First time, say, there's "project's top level task" existing with its uuid.
# User starts with this in editor:
# 
# * project's top level task UUID=blah
# 
# After editing, user ends up with:
# 
# * project's top level task UUID=blah
#   * subtask 1 DURATION=3600
#   * subtask 2 DURATION=600
# 
# Program creates task entries for new subtasks, saves duration attr, sets top task's dependencies list to UUIDs of new subtasks.
# Next time editor will present this to user:
# 
# * project's top level task UUID=blah
#   * subtask 1 DURATION=3600 UUID=blah1
#   * subtask 2 DURATION=600 UUID=blah2
# 
# And maybe it'll add that DURATION of top level task will be the sum of subtasks.
# 
# Later, user can insert any new lines - program will create task entry for them.
# Subtasks can be moved around i.e. reparented. Dependencies graph will get updated.
# Deleted entries with existing UUIDs will be marked as "deleted" in DB.

import os
import sys
import subprocess
import psycopg2
import psycopg2.extras
from datetime import datetime, timedelta
import pytz
from pprint import pprint


TOP_UUID = sys.argv[1]

conn = psycopg2.connect("dbname=j user=j")
cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
cur.execute("PREPARE SEL_BY_UUID_FROM_TREE_EDIT AS SELECT * FROM tasks WHERE uuid = $1");
#cur.execute("PREPARE SEL_BY_PARENT_FROM_TREE_EDIT AS SELECT * FROM tasks WHERE parent = $1 ORDER BY scheduled");
# Pending only:
cur.execute("PREPARE SEL_BY_PARENT_FROM_TREE_EDIT AS SELECT * FROM tasks WHERE parent = $1 AND status = 'pending' ORDER BY scheduled");

def get_by_uuid(uuid):
    cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cur.execute("EXECUTE SEL_BY_UUID_FROM_TREE_EDIT (%s)", (uuid,))
    row = cur.fetchone()
    return row

def get_by_parent(uuid):
    cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cur.execute("EXECUTE SEL_BY_PARENT_FROM_TREE_EDIT (%s)", (uuid,))
    rows = cur.fetchall()
    return rows

def get_children_recursively(uuid):
    children_db_rows = get_by_parent(uuid)
    children_list = []
    for row in children_db_rows:
        child = dict()
        child['node'] = row
        child['children'] = get_children_recursively(row['uuid'])
        children_list.append(child)
    return children_list

def status_str(row_status):
    if row_status == 'pending':
        return ' ';
    if row_status == 'completed':
        return 'V';
    else:
        return 'Z';

def print_tree(tree, depth=0):
    row = tree['node']
    print(
            '*' * (depth + 1) +
            ' ' +
            '[%s]' % status_str(row['status']) +
            ' %s' % row['scheduled'].strftime('%m-%d %H:%M') +
            ' %dh' % (int(row['duration']) // 3600) +
            ' ' + row['description'] +
            ''
            )

    for child in tree['children']:
        print_tree(child, depth + 1)

tree = dict()
top_task = get_by_uuid(TOP_UUID)
tree['node'] = top_task
tree['children'] = get_children_recursively(TOP_UUID)

print_tree(tree)
